# context
# Autogenerated from man page /usr/share/man/man1/context.1.gz
complete -c context -l run -d 'process (one or more) files (default action)'
complete -c context -l make -d 'create context formats'
complete -c context -l ctx -d 'use ctx file (process management specification)'
complete -c context -l noctx -d 'ignore ctx directives and flags'
complete -c context -l interface -d 'use specified user interface (default: en)'
complete -c context -l autopdf -d 'close pdf file in viewer and start pdf viewer afterwards'
complete -c context -l purge -d 'purge files either or not after a run (--pattern=. )'
complete -c context -l purgeall -d 'purge all files either or not after a run (--pattern=. )'
complete -c context -l usemodule -d 'load the given module or style, normally part of the distribution'
complete -c context -l environment -d 'load the given environment file first (document styles)'
complete -c context -l mode -d 'enable given the modes (conditional processing in styles)'
complete -c context -l path -d 'also consult the given paths when files are looked for'
complete -c context -l arguments -d 'set variables that can be consulted during a run (key/value pairs)'
complete -c context -l randomseed -d 'set the randomseed'
complete -c context -l result -d 'rename the resulting output to the given name'
complete -c context -l trackers -d 'set tracker variables (show list with --showtrackers)'
complete -c context -l directives -d 'set directive variables (show list with --showdirectives)'
complete -c context -l silent -d 'disable logcatgories (show list with --showlogcategories)'
complete -c context -l strip -d 'strip Lua code (only meant for production where no errors are expected)'
complete -c context -l errors -d 'show errors at the end of a run, quit when in list (also when --silent)'
complete -c context -l htmlerrorpage -d 'generate html error page instead (optional: =scite)'
complete -c context -l noconsole -d 'disable logging to the console (logfile only)'
complete -c context -l nodummy -d 'don\'t create a dummy file (can confuse pdf viewers that keep file in view)'
complete -c context -l purgeresult -d 'purge result file before run'
complete -c context -l forcexml -d 'force xml stub'
complete -c context -l forcecld -d 'force cld (context lua document) stub'
complete -c context -l forcelua -d 'force lua stub (like texlua)'
complete -c context -l forcemp -d 'force mp stub'
complete -c context -l arrange -d 'run extra imposition pass, given that the style sets up imposition'
complete -c context -l noarrange -d 'ignore imposition specifications in the style'
complete -c context -l pages -d 'report pagenumbers of names pages and list references (--page=.  or --page='
complete -c context -l jit -d 'use luajittex with jit turned off (only use the faster virtual machine)'
complete -c context -l jiton -d 'use luajittex with jit turned on (in most cases not faster, even slower)'
complete -c context -l once -d 'only run once (no multipass data file is produced)'
complete -c context -l runs -d 'process at most this many times'
complete -c context -l forcedruns -d 'process this many times (permits for optimization trial runs)'
complete -c context -l batchmode -d 'run without stopping and do not show messages on the console'
complete -c context -l nonstopmode -d 'run without stopping'
complete -c context -l nosynctex -d 'never initializes synctex (for production runs)'
complete -c context -l synctex -d 'run with synctex enabled (better use \\setupsynctex[state=start]'
complete -c context -l nodates -d 'omit runtime dates in pdf file (optional value: a number (this 1970 offset ti…'
complete -c context -l nocompression -d 'forcefully turns off compression in the backend'
complete -c context -l trailerid -d 'alternative trailer id (or constant one)'
complete -c context -l generate -d 'generate file database etc.  (as luatools does)'
complete -c context -l paranoid -d 'do not descend to .  and . /'
complete -c context -l version -d 'report installed context version'
complete -c context -l global -d 'assume given file present elsewhere'
complete -c context -l nofile -d 'use dummy file as jobname OPTIONS: EXPERT'
complete -c context -l touch -d 'update context version number (also provide --expert, optionally provide --ba…'
complete -c context -l nostatistics -d 'omit runtime statistics at the end of the run'
complete -c context -l profile -d 'profile job (use: mtxrun --script profile --analyze)'
complete -c context -l timing -d 'generate timing and statistics overview'
complete -c context -l keeptuc -d 'keep previous tuc files (jobname-tuc-[run]. tmp)'
complete -c context -l keeplog -d 'keep previous log files (jobname-log-[run]. tmp)'
complete -c context -l lmtx -d 'force lmtx mode (when available)'
complete -c context -l overloadmode -d 'enable csname overload checking'
complete -c context -l extra -d 'process extra (mtx-context-.  in distribution)'
complete -c context -l extras -d 'show extras OPTIONS: SPECIAL'
complete -c context -l pdftex -d 'process file with texexec using pdftex'
complete -c context -l xetex -d 'process file with texexec using xetex'
complete -c context -l mkii -d 'process file with texexec'
complete -c context -l pipe -d 'do not check for file and enter scroll mode (--dummyfile=whatever. tmp)'
complete -c context -l sandbox -d 'process file in a limited environment'
complete -c context -l addbinarypath -d 'prepend the (found) binarypath to runners AUTHOR More information about ConTe…'

